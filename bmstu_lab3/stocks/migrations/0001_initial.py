# Generated by Django 4.2.4 on 2023-12-14 01:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('username', models.CharField(max_length=100)),
                ('is_staff', models.BooleanField(default=False, verbose_name='Является ли пользователь менеджером?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Является ли пользователь админом?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'bmstu_users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('Event_id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=30)),
                ('Start_date', models.DateField()),
                ('End_date', models.DateField()),
                ('Image', models.ImageField(upload_to='events/')),
                ('Status', models.CharField(choices=[('A', 'Доступно'), ('C', 'Завершено'), ('S', 'Скоро'), ('D', 'Удалено')], max_length=20)),
                ('Info', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'bmstu_events',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Reservations',
            fields=[
                ('Reserve_id', models.AutoField(primary_key=True, serialize=False)),
                ('Creation_date', models.DateTimeField()),
                ('Formation_date', models.DateTimeField(null=True)),
                ('Completion_date', models.DateTimeField(null=True)),
                ('Status', models.CharField(choices=[('M', 'Черновик'), ('iP', 'В работе'), ('C', 'Завершена'), ('Ca', 'Отменена'), ('D', 'Удалена')], max_length=20)),
                ('Client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_reservations', to=settings.AUTH_USER_MODEL)),
                ('Moderator_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderator_reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bmstu_reservations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Event_Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Group_info', models.CharField(max_length=20)),
                ('Group_size', models.IntegerField()),
                ('Date', models.DateField()),
                ('Event_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stocks.events')),
                ('Reserve_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stocks.reservations')),
            ],
            options={
                'db_table': 'bmstu_event_reservation',
                'managed': True,
            },
        ),
    ]
